#!/bin/bash

# exit when any command fails
set -e

REQUIRED_TOOLS=(
  git
)

for TOOL in "${REQUIRED_TOOLS[@]}"; do
  if ! command -v "${TOOL}" >/dev/null; then
    echo "${TOOL} is required... "
    exit 1
  fi
done

FILE=.env
if [ -f "$FILE" ]; then
  echo "exporting .env"
  set -a # export all variables created next
  # this routine ranges through a folder of files that we don't explicitly know (@davidsneighbour)
  # see https://github.com/koalaman/shellcheck/wiki/SC1090
  # shellcheck source=/dev/null
  source "${FILE}"
  set +a # stop exporting
else
  echo "no .env file found"
  exit 0
fi

VERSION=$(node -pe 'require("./package.json")["version"]')

# update version in citation configuration
FILE=CITATION.cff
if test -f "$FILE"; then
  VERSION=$(node -pe 'require("./package.json")["version"]')
  sed -i "s/^version: .*/version: ${VERSION}/" $FILE
  DATE=$(date +%F)
  sed -i "s/date-released: .*/date-released: ${DATE}/" $FILE
  git add $FILE
fi

# build static scripts
# npm run build
# git add static/sw-*

# adding data directory for new build information
git add README.md
git commit --signoff --amend --no-edit --no-verify

# push release to GitHub
git push origin main --follow-tags
git push origin --tags

# create a release on GitHub
GITHUB_REPO=https://github.com/${GITHUB_REPOSLUG}
URL="$GITHUB_REPO"/"releases/edit/v""$VERSION"
curl \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: token ${GITHUB_SECRET}" \
  https://api.github.com/repos/"${GITHUB_REPOSLUG}"/releases \
  -d "{\"tag_name\":\"v${VERSION}\",\"name\":\"v${VERSION}\",\"draft\":false,\"prerelease\":false,\"generate_release_notes\":true}"
xdg-open "${URL}" &>>/dev/null
